#!/usr/bin/env python
from BitsflowTest import *
from login import login_connections
import sys
import os
import traceback
import re

class DataCellTest(BitsflowTest):
  intro =  "Welcome to yoyo-shell, please use 'help' to show all commands!\n\n"
  intro += "Follow me to install DataCell:\n"
  intro += "  1) prepare yoyopkg-xxx-noarch.tar.gz\n"
  intro += "  2) run 'installYoyopkg /yoyopkg_path/yoyopkg-xxx-noarch.tar.gz'\n"
  intro += "  3) run 'yoyopkg install --tag DATACELL_BLEEDING_EDGE'\n"
  intro += "  4) prepare agent.xml.sample, groupd.xml.sample and yoyo.lic in current path\n"
  intro += "  5) run 'configBitsflow agent.xml.sample yoyo.lic'\n"
  intro += "  6) run 'configGroupd groupd.xml.sample'\n"
  intro += "  7) run 'startAgent'\n"
  intro += "  8) run 'startGroupd'\n"
  intro += "  9) prepare DataCell.xml.sample in current path\n"
  intro += " 10) run 'configDataCell DataCell.xml.sample'\n"
  intro += " 11) run 'startDataCell'\n"
  intro += " 12) run 'ps' (show DataCell process)\n"
  intro += " 13) run 'getBitsflowLog' (download Bitsflow logs from all nodes)\n"
  intro += " 14) run 'getDataCellLog' (download DataCell logs from all nodes)\n"

  def __init__(self, bitsflowHome, pcList, username, password):
    BitsflowTest.__init__(self, bitsflowHome, pcList, username, password)
  
  def do_backupLog(self, user_input):
    """Usage: backupLog dir"""
    if len(user_input) == 0:
      print "Usage: backupLog dir"
    else:
      cmd = "mkdir %s; cp %s %s; cp %s %s"%(user_input, os.path.join(datacell_log_home, "%s*"%datacell_log_name), user_input, os.path.join(datacell_storage_home,"*core*"), user_input)
      self.parallelExecute(cmd)

  def getDataCellLog(self, pc):
    global login_connections
    print "\n====== IP: " + pc + " getDataCellLog ======"
    tarFolder = "DataCellLog-"+pc 
    tarLog = tarFolder+".tar.gz"

    tarLogCmd = "rm -rf DataCellLog-*.tar.gz;mkdir %s;cd %s;rm -rf *;gdb --pid=`cat %s` --command=~/yoyo_gdb_attach | tee datacell.stack;cp -rf %s %s %s ./;cd ../;tar cvzf %s %s" %(tarFolder, tarFolder, os.path.join(datacell_log_home, datacell_pid_name), os.path.join(datacell_log_home, "%s*"%datacell_log_name), os.path.join(datacell_storage_home,"*core*"), os.path.join(release_home, "conf", datacell_conf_name), tarLog, tarFolder)

    self.singleExecute(pc, tarLogCmd)
    login_connections[pc].get(tarLog)
    for name, version in login_connections.iteritems():
      print name,version

  def do_backupDataCellLog(self, user_input):
    """Usage: backupDataCellLog dir"""
    if len(user_input) == 0:
      print "Usage: backupDataCellLog dir"
    else:
      cmd = "mkdir %s; cp %s %s; cp %s %s"%(user_input, os.path.join(datacell_log_home, "%s*"%datacell_log_name), user_input, os.path.join(datacell_storage_home,"*core*"), user_input)
      self.parallelExecute(cmd, datacell_list)

  def do_startDataCell(self, user_input):
    """start datacell with runDataCell.sh"""
    self.parallelExecute("sh %s"%os.path.join(release_home, "runDataCell.sh"), datacell_list)

  def do_getDataCellLog(self, user_input):
    """Download datacell logs"""
    try:
      self.startWork(self.getDataCellLog, datacell_list)
    except:
      print sys.exc_info()
    finally:
      pass

  def do_rmDataCellStorage(self, user_input):
    """Remove all files which under the datacell_storage_home"""
    self.parallelExecute("find %s -type f -delete"%(datacell_storage_home), datacell_list)
    for volume in datacell_volumes:
      self.parallelExecute("find %s -type f -delete"%(volume), datacell_list)


  def do_rmDataCellLog(self, user_input):
    """Remove datacell logs"""
    self.parallelExecute("rm -rf %s %s"%(os.path.join(datacell_log_home, "%s*"%datacell_log_name), os.path.join(datacell_storage_home,"*core*")), datacell_list)

  def do_stopDataCell(self, user_input):
    """kill DataCell [ip1 ip2 ... ipN]"""
    if len(user_input) == 0:
      self.parallelExecute("kill `cat %s`"%os.path.join(datacell_log_home, datacell_pid_name), datacell_list)
    else:
      inputs = user_input.split()
      self.parallelExecute("kill `cat %s`"%os.path.join(datacell_log_home, datacell_pid_name), inputs)

  def do_killDataCell(self, user_input):
    """kill -9 DataCell [ip1 ip2 ... ipN]"""
    if len(user_input) == 0:
      self.parallelExecute("kill -9 `cat %s`"%os.path.join(datacell_log_home, datacell_pid_name), datacell_list)
    else:
      inputs = user_input.split()
      self.parallelExecute("kill -9 `cat %s`"%os.path.join(datacell_log_home, datacell_pid_name), inputs)

  def do_ps(self, user_input):
    """Usage: ps [processName] (If no processName, we'll "ps DataCell")"""
    if len(user_input) == 0:
      cmd = "ps aux|grep DataCell|grep -v \"grep\""
    else:
      cmd = "ps aux|grep %s"%user_input
    self.serialExecute(cmd)

  def do_psAgent(self, user_input):
    """Usage: ps [processName] (If no processName, we'll "ps agent")"""
    if len(user_input) == 0:
      cmd = "ps aux|grep agent | grep -v \"grep\"| grep yoyopkg "
    else:
      cmd = "ps aux|grep %s"%user_input
    self.serialExecute(cmd)

  def do_psGroupd(self, user_input):
    """Usage: ps [processName] (If no processName, we'll "ps groupd")"""
    if len(user_input) == 0:
      cmd = "ps aux|grep groupd | grep -v \"grep\"| grep yoyopkg "
    else:
      cmd = "ps aux|grep %s"%user_input
    self.serialExecute(cmd)


  def createStopScript(self):
    f = open("stopdc.sh", "w")
    f.write("#!/bin/sh\n")
    f.write("pid=`ps -ef | grep datacell.xml | grep -v \"grep\" |awk '{print $2}'`\n")
    f.write("kill -9 $pid\n")
    f.write("rm -rf /root/yoyopkg/logs/agent.log.*\n")
    f.write("rm -rf /root/yoyopkg/logs/groupd.log.*\n")
    f.write("rm -rf /root/yoyopkg/storage/*\n")
    f.write("rm -rf /mnt/hd1/fs/*\n")
    f.write("rm -rf /mnt/hd2/fs/*\n")
    f.close()    

  def createRunScript(self):
    f = open("runDataCell.sh", "w")
    script = u'''#!/bin/sh
export RELEASE_HOME=%s
export YOYO_LOG_DIR=%s
ulimit -c unlimited
ulimit -n 102400
. $RELEASE_HOME/bf_setenv.sh
export YOYO_DEFAULT_LOG_LVL=Error
export YOYO_LOG_CORE_DHT=Debug
export YOYO_LOG_DATACELL_GENERAL=Debug
export YOYO_LOG_DATACELL_BACKEND=Debug
export YOYO_LOG_DATACELL_DAEMON=Debug
export YOYO_LOG_DATACELL_API=Debug
export YOYO_LOG_CORE_FILE=Debug
export YOYO_LOG_DATACELL_TIME_SERIES_BACKEND=Debug
export YOYO_LOG_DATACELL_FILE_SYSTEM_BACKEND=Debug
#export YOYO_DEFAULT_LOG_LVL=%s
YOYO_LOG_ROTATION_LINES=2000000000
#export YOYO_LOG_ROTATION_FILES=999
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$RELEASE_HOME/lib
$RELEASE_HOME/bin/DataCell -d -logfile $YOYO_LOG_DIR/%s -cfgfile $RELEASE_HOME/conf/%s -pidfile $YOYO_LOG_DIR/%s
'''%(release_home, datacell_log_home, datacell_log_level, datacell_log_name, datacell_conf_name, datacell_pid_name)
    f.write(script)
    f.close()

  def do_configDataCell(self, user_input):
    """Usage: configDataCell DataCell.xml.sample"""
    inputs = user_input.split()
    inputs_len = len(inputs)

    if inputs_len != 1:
      print "Usage: configDataCell DataCell.xml.sample"
      return
    else:
      try:
        self.createGDBScript()
        self.putFile("yoyo_gdb_attach")
        self.createRunScript()
        self.putFile("runDataCell.sh", os.path.join(release_home, "runDataCell.sh"))
        self.createStopScript()
        self.putFile("stopdc.sh",os.path.join(release_home, "stopdc.sh"))

        confPath  = os.path.join(release_home, "conf")
        self.parallelExecute("mkdir -p %s %s %s"%(confPath, datacell_storage_home, datacell_log_home), datacell_list)
        remoteDCConf = os.path.join(confPath, datacell_conf_name)
        for ip in datacell_list:
          localDCConf = "%s.%s"%(datacell_conf_name, ip)
          os.system("cp %s %s"%(inputs[0], localDCConf))
<<<<<<< .mine
          replace = "sed -i 's/DC_NODE_1/%s/g' %s"%(ip, localDCConf)
          #replace = "sed -i 's/<Node-Id>.*<\/Node-Id>/<Node-Id>%s<\/Node-Id>/g' %s"%(ip, localDCConf)
=======
          replace = "sed -i 's/<Name>.*<\/Name>/<Name>%s<\/Name>/g' %s"%(ip, localDCConf)
>>>>>>> .r82837
          os.system(replace)
          replace = "sed -i 's/<Root>.*<\/Root>/<Root>%s<\/Root>/g' %s"%(re.escape(datacell_storage_home), localDCConf)
          os.system(replace)
          self.putFileToPC(localDCConf, remoteDCConf, ip)
      except:
        traceback.print_exc()


if __name__ == "__main__":
  argv = sys.argv
  argn = len(argv)

  if argn == 1:
    configModule = "config"
  elif argn == 2:
    configModule = argv[1].split(".")
    if len(configModule) > 2:
      print "Usage: python %s [configModule]"%argv[0]
      print "configModule must like that 'XXX.py' or 'XXX'"
      sys.exit(0)
    configModule = configModule[0]
  else:
    print "Usage: python %s [configModule]"%argv[0]
    sys.exit(0)

  print "load config module: " + configModule

  for key, val in vars(__import__(configModule)).iteritems():
    if key.startswith('__') and key.endswith('__'):
      continue
    vars()[key] = val


  datacellctl = DataCellTest(release_home, pc_list, username, password)
  datacellctl.cmdloop()
