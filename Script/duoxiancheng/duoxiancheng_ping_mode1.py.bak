#!/usr/bin/env python
#-*- encoding: utf-8 -*-
import string, threading, time, string ,subprocess

################################################
# 加入Queue 使线程更为简单化，因为队列模块通过信号量的使用会
# 明显减轻数据的保护需要，队列本身已经是通过内部的一个信号量
# 进行保护了。
##############################################

from Queue import Queue

###################
# 在Python中线程和队列的基本关系中。当队列为空时工作完成。
##############
#action 1
def ping_baidu():
      subprocess.PIPE
      cmd= 'ping -c %s %s' % (2,"baidu"+".com"+"\n")
      PING=subprocess.Popen(cmd,stdin = subprocess.PIPE,
                                stdout = subprocess.PIPE,
                                stderr = subprocess.PIPE,
                                shell = True)
      PING.stdin.close()          
      PING.wait()                 
      print "execution result: %s" %PING.stdout.read()
      #time.sleep(1)
#######################
#action 2
def show_system():
      subprocess.PIPE
      #cmd= 'ping -c %s %s' % (2,"sina"+".com"+"\n")
      cmd='uname -a'
      PING=subprocess.Popen(cmd,stdin = subprocess.PIPE,
                                stdout = subprocess.PIPE,
                                stderr = subprocess.PIPE,
                                shell = True)
      PING.stdin.close()          
      PING.wait()                 
      print "execution result: %s" %PING.stdout.read()
      #time.sleep(1)
########################
#action 3
def show_ip():
      subprocess.PIPE
      #cmd= 'ping -c %s %s' % (2,"yahoo.com"+"\n")
      cmd='ifconfig -a'
      PING=subprocess.Popen(cmd,stdin = subprocess.PIPE,
                                stdout = subprocess.PIPE,
                                stderr = subprocess.PIPE,
                                shell = True)
      PING.stdin.close()          
      PING.wait()                 
      print "execution result: %s" %PING.stdout.read()
      #time.sleep(1)

#########################
#action 4
def whoami_login():
      subprocess.PIPE
      #cmd= 'ping -c %s %s' %(2,"sohu"+".com"+"\n")
      cmd= 'whoami'
      PING=subprocess.Popen(cmd,stdin = subprocess.PIPE,
                                stdout = subprocess.PIPE,
                                stderr = subprocess.PIPE,
                                shell = True)
      PING.stdin.close()          
      PING.wait()                 
      print "execution result: %s" %PING.stdout.read()
      #time.sleep(1)

#########################
#action 5
def hello_world():
      subprocess.PIPE
      #cmd= 'ping -c %s %s' % (2,"apple.com"+"\n")
      cmd='echo %s'%("hello,world")
      PING=subprocess.Popen(cmd,stdin = subprocess.PIPE,
                                stdout = subprocess.PIPE,
                                stderr = subprocess.PIPE,
                                shell = True)
      PING.stdin.close()          
      PING.wait()                 
      print "execution result: %s" %PING.stdout.read()
      #time.sleep(1)
#########################
def thread_main(x):
    #global count, mutex
    # 获得线程名
    threadname = threading.currentThread().getName()
    #
    #action = ['ping_baidu()','show_system()','show_ip()',
    #         'whoami_login()','hello_world()']
    action = ['ping_baidu()','show_system()','show_ip()',
             'whoami_login()','hello_world()']
    print x # x 为1、2、3、4、5
    print action
    print threadname

    
def main(num):
    threads = []
    
    # 先创建线程对象
    for x in xrange(1, num+1):
        threads.append(threading.Thread(target=thread_main, args=(x,)))
    # 启动所有线程
    for t in threads:
        t.setDaemon(True)
        t.start()
        time.sleep(0.1)
    # 主线程中等待所有子线程退出
    for t in threads:
        t.join()  
    
    
if __name__ == '__main__':
    num = 5
    # 创建4个线程
    main(num)
